apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: "pod-policy.example.com"
webhooks:
  - name: "pod-policy.example.com"
    rules:
      - apiGroups: [""]
        apiVersions: ["v1"]
        operations: ["CREATE"]
        resources: ["pods"]
        scope: "Namespaced"
    clientConfig: #where we specify the location of our admission webhook server
      service:
        namespace: "example-namespace"
        name: "example-service"
      caBundle: <CA_BUNDLE>
    admissionReviewVersions: ["v1"]
    sideEffects: None
    timeoutSeconds: 5
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhook-server
  namespace: webhook-demo
  labels:
    app: webhook-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webhook-server
  template:
    metadata:
      labels:
        app: webhook-server
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1234
      containers:
        - name: server
          image: stackrox/admission-controller-webhook-demo:latest
          imagePullPolicy: Always
          resources:
            limits:
              memory: 128Mi
              cpu: 500m
          ports:
            - containerPort: 8443
              name: webhook-api
          volumeMounts:
            - name: webhook-tls-certs
              mountPath: /run/secrets/tls
              readOnly: true
      volumes:
        - name: webhook-tls-certs
          secret:
            secretName: webhook-server-tls
---
apiVersion: v1
kind: Service
metadata:
  name: webhook-server
  namespace: webhook-demo
spec:
  selector:
    app: webhook-server
  ports:
    - port: 443
      targetPort: webhook-api
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: demo-webhook
webhooks:
  - name: webhook-server.webhook-demo.svc
    clientConfig:
      service:
        name: webhook-server
        namespace: webhook-demo
        path: "/mutate"
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQekNDQWllZ0F3SUJBZ0lVTTY5Tk0yWEFSQzkvL09HdXZGUDZjamtpSjEwd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0x6RXRNQ3NHQTFVRUF3d2tRV1J0YVhOemFXOXVJRU52Ym5SeWIyeHNaWElnVjJWaWFHOXZheUJFWlcxdgpJRU5CTUI0WERUSXpNRGt3TVRBMU1qUXdPVm9YRFRJek1UQXdNVEExTWpRd09Wb3dMekV0TUNzR0ExVUVBd3drClFXUnRhWE56YVc5dUlFTnZiblJ5YjJ4c1pYSWdWMlZpYUc5dmF5QkVaVzF2SUVOQk1JSUJJakFOQmdrcWhraUcKOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQTQrV3JkaTNLRVZQdEgyNFM5b1FFUWI1UlFBZ3NQUWdpL2V3dgpibXBuTitwY2tIM0tDd3kxK3h3dzR1WGNqN0dvV2d4VkNyZ0N4THRnaEdsY1cvT3N3d2VaQTdXWjFTak5HNU9UCldEYkc5b3Qwb1RVTlBLK3pRR1QvOGZ5RHBLTnBrcW5jNndLUEF1QzJJU1dMUktpUFNxSUtOckFJVHowMXBKbnYKUmtXMm1NaFU0eksxUVorckhYVmd3MDgzSllKTGd1Q3U1OFpuU0h2S1FPZ1BCbjZhYnhEdDk1NWgvL0g0T09MeQppemQxN1dTZVpXOG9NOVkwZ0NGUEdYU1VhLzlGSU1CT2NFVnRsdGZrZWpYRUt6KythNEVETEtGSDR5SERxSXplCmpkRnErVkp3dldwN2FrenI3ZmtlTVBtbWhybk1aTVJOVHNTSHlPb1VvdFMxL1lVZGNRSURBUUFCbzFNd1VUQWQKQmdOVkhRNEVGZ1FVKzhpT3JzTzJMNmEvQnIvbGpleEFJeEJEYzlnd0h3WURWUjBqQkJnd0ZvQVUrOGlPcnNPMgpMNmEvQnIvbGpleEFJeEJEYzlnd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBTkJna3Foa2lHOXcwQkFRc0ZBQU9DCkFRRUFVbmFIdFJ2cnNRYkRVNXhUM203R05sQ3pwNXk2eWRPWEhkWms2cmdOUHVvSjBJdkdjd2JmcU9EM1B2dkQKSmtaN3B6SW4yNmdYaWNjL1JNNmllTkJzbGJSSnl6Y3RwWkczdkxGSjlZaU14bWdjNyt3QUsvdC9heXZJaTZiSApJV1hHQ2VmRS9zQndlQ2xaUDA4R0crSGNJVTBFTmN0VEpVVlRjZ1VycTVTUUxhMXhBN2F0S1U4QXFJeExXZGVqCnZkTjdWMDNpcHplV2lySEREQTVyNUNGZ0ZtR3Q3Vis0akxTRkkvR1hoQzUvenFOZ3JIbjRkeThQNTkxOUF0Z0UKMW1TeDZyUENOTmhhUzltMWxYMUZFR2hmdWtIcGVmbTVJSEpRUktuU3U0dGU3UHArcVcyNncwcnBqaHFzQm80VgpuNVUzNWRNeU1Ed1gwMXBXQ1gyN1k1bmdEUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    rules:
      - operations: ["CREATE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    admissionReviewVersions: ["v1beta1"]
    sideEffects: None
# this webhook:
#- Denies all request for pod to run as root in container if no securityContext is provided.
#- If no value is set for runAsNonRoot, a default of true is applied, and the user ID defaults to 1234
#- Allow to run containers as root if runAsNonRoot set explicitly to false in the securityContext
